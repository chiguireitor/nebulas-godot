// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2ftransaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2ftransaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2ftransaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2ftransaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2ftransaction_2eproto;
namespace corepb {
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace corepb
PROTOBUF_NAMESPACE_OPEN
template<> ::corepb::Data* Arena::CreateMaybeMessage<::corepb::Data>(Arena*);
template<> ::corepb::Transaction* Arena::CreateMaybeMessage<::corepb::Transaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace corepb {

// ===================================================================

class Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:corepb.Data) */ {
 public:
  inline Data() : Data(nullptr) {}
  virtual ~Data();

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(nullptr);
  }

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "corepb.Data";
  }
  protected:
  explicit Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2ftransaction_2eproto);
    return ::descriptor_table_protobuf_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadTypeFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // string payload_type = 1;
  void clear_payload_type();
  const std::string& payload_type() const;
  void set_payload_type(const std::string& value);
  void set_payload_type(std::string&& value);
  void set_payload_type(const char* value);
  void set_payload_type(const char* value, size_t size);
  std::string* mutable_payload_type();
  std::string* release_payload_type();
  void set_allocated_payload_type(std::string* payload_type);
  private:
  const std::string& _internal_payload_type() const;
  void _internal_set_payload_type(const std::string& value);
  std::string* _internal_mutable_payload_type();
  public:

  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:corepb.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class Transaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:corepb.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "corepb.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2ftransaction_2eproto);
    return ::descriptor_table_protobuf_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kValueFieldNumber = 4,
    kGasPriceFieldNumber = 9,
    kGasLimitFieldNumber = 10,
    kSignFieldNumber = 12,
    kDataFieldNumber = 7,
    kNonceFieldNumber = 5,
    kTimestampFieldNumber = 6,
    kChainIdFieldNumber = 8,
    kAlgFieldNumber = 11,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes from = 2;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes to = 3;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes value = 4;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bytes gas_price = 9;
  void clear_gas_price();
  const std::string& gas_price() const;
  void set_gas_price(const std::string& value);
  void set_gas_price(std::string&& value);
  void set_gas_price(const char* value);
  void set_gas_price(const void* value, size_t size);
  std::string* mutable_gas_price();
  std::string* release_gas_price();
  void set_allocated_gas_price(std::string* gas_price);
  private:
  const std::string& _internal_gas_price() const;
  void _internal_set_gas_price(const std::string& value);
  std::string* _internal_mutable_gas_price();
  public:

  // bytes gas_limit = 10;
  void clear_gas_limit();
  const std::string& gas_limit() const;
  void set_gas_limit(const std::string& value);
  void set_gas_limit(std::string&& value);
  void set_gas_limit(const char* value);
  void set_gas_limit(const void* value, size_t size);
  std::string* mutable_gas_limit();
  std::string* release_gas_limit();
  void set_allocated_gas_limit(std::string* gas_limit);
  private:
  const std::string& _internal_gas_limit() const;
  void _internal_set_gas_limit(const std::string& value);
  std::string* _internal_mutable_gas_limit();
  public:

  // bytes sign = 12;
  void clear_sign();
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const void* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // .corepb.Data data = 7;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::corepb::Data& data() const;
  ::corepb::Data* release_data();
  ::corepb::Data* mutable_data();
  void set_allocated_data(::corepb::Data* data);
  private:
  const ::corepb::Data& _internal_data() const;
  ::corepb::Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::corepb::Data* data);
  ::corepb::Data* unsafe_arena_release_data();

  // uint64 nonce = 5;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 timestamp = 6;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 chain_id = 8;
  void clear_chain_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 chain_id() const;
  void set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chain_id() const;
  void _internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 alg = 11;
  void clear_alg();
  ::PROTOBUF_NAMESPACE_ID::uint32 alg() const;
  void set_alg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_alg() const;
  void _internal_set_alg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:corepb.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_price_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_limit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::corepb::Data* data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chain_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 alg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2ftransaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Data

// string payload_type = 1;
inline void Data::clear_payload_type() {
  payload_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Data::payload_type() const {
  // @@protoc_insertion_point(field_get:corepb.Data.payload_type)
  return _internal_payload_type();
}
inline void Data::set_payload_type(const std::string& value) {
  _internal_set_payload_type(value);
  // @@protoc_insertion_point(field_set:corepb.Data.payload_type)
}
inline std::string* Data::mutable_payload_type() {
  // @@protoc_insertion_point(field_mutable:corepb.Data.payload_type)
  return _internal_mutable_payload_type();
}
inline const std::string& Data::_internal_payload_type() const {
  return payload_type_.Get();
}
inline void Data::_internal_set_payload_type(const std::string& value) {
  
  payload_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Data::set_payload_type(std::string&& value) {
  
  payload_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:corepb.Data.payload_type)
}
inline void Data::set_payload_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:corepb.Data.payload_type)
}
inline void Data::set_payload_type(const char* value,
    size_t size) {
  
  payload_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:corepb.Data.payload_type)
}
inline std::string* Data::_internal_mutable_payload_type() {
  
  return payload_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Data::release_payload_type() {
  // @@protoc_insertion_point(field_release:corepb.Data.payload_type)
  return payload_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Data::set_allocated_payload_type(std::string* payload_type) {
  if (payload_type != nullptr) {
    
  } else {
    
  }
  payload_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:corepb.Data.payload_type)
}

// bytes payload = 2;
inline void Data::clear_payload() {
  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Data::payload() const {
  // @@protoc_insertion_point(field_get:corepb.Data.payload)
  return _internal_payload();
}
inline void Data::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:corepb.Data.payload)
}
inline std::string* Data::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:corepb.Data.payload)
  return _internal_mutable_payload();
}
inline const std::string& Data::_internal_payload() const {
  return payload_.Get();
}
inline void Data::_internal_set_payload(const std::string& value) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Data::set_payload(std::string&& value) {
  
  payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:corepb.Data.payload)
}
inline void Data::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:corepb.Data.payload)
}
inline void Data::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:corepb.Data.payload)
}
inline std::string* Data::_internal_mutable_payload() {
  
  return payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Data::release_payload() {
  // @@protoc_insertion_point(field_release:corepb.Data.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Data::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:corepb.Data.payload)
}

// -------------------------------------------------------------------

// Transaction

// bytes hash = 1;
inline void Transaction::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction::hash() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.hash)
  return _internal_hash();
}
inline void Transaction::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.hash)
}
inline std::string* Transaction::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.hash)
  return _internal_mutable_hash();
}
inline const std::string& Transaction::_internal_hash() const {
  return hash_.Get();
}
inline void Transaction::_internal_set_hash(const std::string& value) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction::set_hash(std::string&& value) {
  
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.hash)
}
inline void Transaction::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.hash)
}
inline void Transaction::set_hash(const void* value,
    size_t size) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.hash)
}
inline std::string* Transaction::_internal_mutable_hash() {
  
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction::release_hash() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.hash)
}

// bytes from = 2;
inline void Transaction::clear_from() {
  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction::from() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.from)
  return _internal_from();
}
inline void Transaction::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.from)
}
inline std::string* Transaction::mutable_from() {
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.from)
  return _internal_mutable_from();
}
inline const std::string& Transaction::_internal_from() const {
  return from_.Get();
}
inline void Transaction::_internal_set_from(const std::string& value) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction::set_from(std::string&& value) {
  
  from_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.from)
}
inline void Transaction::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.from)
}
inline void Transaction::set_from(const void* value,
    size_t size) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.from)
}
inline std::string* Transaction::_internal_mutable_from() {
  
  return from_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction::release_from() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.from)
}

// bytes to = 3;
inline void Transaction::clear_to() {
  to_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction::to() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.to)
  return _internal_to();
}
inline void Transaction::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.to)
}
inline std::string* Transaction::mutable_to() {
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.to)
  return _internal_mutable_to();
}
inline const std::string& Transaction::_internal_to() const {
  return to_.Get();
}
inline void Transaction::_internal_set_to(const std::string& value) {
  
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction::set_to(std::string&& value) {
  
  to_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.to)
}
inline void Transaction::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.to)
}
inline void Transaction::set_to(const void* value,
    size_t size) {
  
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.to)
}
inline std::string* Transaction::_internal_mutable_to() {
  
  return to_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction::release_to() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.to)
}

// bytes value = 4;
inline void Transaction::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction::value() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.value)
  return _internal_value();
}
inline void Transaction::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.value)
}
inline std::string* Transaction::mutable_value() {
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.value)
  return _internal_mutable_value();
}
inline const std::string& Transaction::_internal_value() const {
  return value_.Get();
}
inline void Transaction::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.value)
}
inline void Transaction::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.value)
}
inline void Transaction::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.value)
}
inline std::string* Transaction::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction::release_value() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.value)
}

// uint64 nonce = 5;
inline void Transaction::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::nonce() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.nonce)
  return _internal_nonce();
}
inline void Transaction::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void Transaction::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.nonce)
}

// int64 timestamp = 6;
inline void Transaction::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::timestamp() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.timestamp)
  return _internal_timestamp();
}
inline void Transaction::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void Transaction::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.timestamp)
}

// .corepb.Data data = 7;
inline bool Transaction::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Transaction::has_data() const {
  return _internal_has_data();
}
inline void Transaction::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::corepb::Data& Transaction::_internal_data() const {
  const ::corepb::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::corepb::Data*>(
      &::corepb::_Data_default_instance_);
}
inline const ::corepb::Data& Transaction::data() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.data)
  return _internal_data();
}
inline void Transaction::unsafe_arena_set_allocated_data(
    ::corepb::Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:corepb.Transaction.data)
}
inline ::corepb::Data* Transaction::release_data() {
  
  ::corepb::Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::corepb::Data* Transaction::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.data)
  
  ::corepb::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::corepb::Data* Transaction::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::corepb::Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::corepb::Data* Transaction::mutable_data() {
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.data)
  return _internal_mutable_data();
}
inline void Transaction::set_allocated_data(::corepb::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.data)
}

// uint32 chain_id = 8;
inline void Transaction::clear_chain_id() {
  chain_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::_internal_chain_id() const {
  return chain_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::chain_id() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.chain_id)
  return _internal_chain_id();
}
inline void Transaction::_internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chain_id_ = value;
}
inline void Transaction::set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.chain_id)
}

// bytes gas_price = 9;
inline void Transaction::clear_gas_price() {
  gas_price_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction::gas_price() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.gas_price)
  return _internal_gas_price();
}
inline void Transaction::set_gas_price(const std::string& value) {
  _internal_set_gas_price(value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.gas_price)
}
inline std::string* Transaction::mutable_gas_price() {
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.gas_price)
  return _internal_mutable_gas_price();
}
inline const std::string& Transaction::_internal_gas_price() const {
  return gas_price_.Get();
}
inline void Transaction::_internal_set_gas_price(const std::string& value) {
  
  gas_price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction::set_gas_price(std::string&& value) {
  
  gas_price_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.gas_price)
}
inline void Transaction::set_gas_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gas_price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.gas_price)
}
inline void Transaction::set_gas_price(const void* value,
    size_t size) {
  
  gas_price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.gas_price)
}
inline std::string* Transaction::_internal_mutable_gas_price() {
  
  return gas_price_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction::release_gas_price() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.gas_price)
  return gas_price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_gas_price(std::string* gas_price) {
  if (gas_price != nullptr) {
    
  } else {
    
  }
  gas_price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_price,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.gas_price)
}

// bytes gas_limit = 10;
inline void Transaction::clear_gas_limit() {
  gas_limit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction::gas_limit() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.gas_limit)
  return _internal_gas_limit();
}
inline void Transaction::set_gas_limit(const std::string& value) {
  _internal_set_gas_limit(value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.gas_limit)
}
inline std::string* Transaction::mutable_gas_limit() {
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.gas_limit)
  return _internal_mutable_gas_limit();
}
inline const std::string& Transaction::_internal_gas_limit() const {
  return gas_limit_.Get();
}
inline void Transaction::_internal_set_gas_limit(const std::string& value) {
  
  gas_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction::set_gas_limit(std::string&& value) {
  
  gas_limit_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.gas_limit)
}
inline void Transaction::set_gas_limit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gas_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.gas_limit)
}
inline void Transaction::set_gas_limit(const void* value,
    size_t size) {
  
  gas_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.gas_limit)
}
inline std::string* Transaction::_internal_mutable_gas_limit() {
  
  return gas_limit_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction::release_gas_limit() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.gas_limit)
  return gas_limit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_gas_limit(std::string* gas_limit) {
  if (gas_limit != nullptr) {
    
  } else {
    
  }
  gas_limit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_limit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.gas_limit)
}

// uint32 alg = 11;
inline void Transaction::clear_alg() {
  alg_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::_internal_alg() const {
  return alg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::alg() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.alg)
  return _internal_alg();
}
inline void Transaction::_internal_set_alg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  alg_ = value;
}
inline void Transaction::set_alg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_alg(value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.alg)
}

// bytes sign = 12;
inline void Transaction::clear_sign() {
  sign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction::sign() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.sign)
  return _internal_sign();
}
inline void Transaction::set_sign(const std::string& value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.sign)
}
inline std::string* Transaction::mutable_sign() {
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.sign)
  return _internal_mutable_sign();
}
inline const std::string& Transaction::_internal_sign() const {
  return sign_.Get();
}
inline void Transaction::_internal_set_sign(const std::string& value) {
  
  sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction::set_sign(std::string&& value) {
  
  sign_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.sign)
}
inline void Transaction::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.sign)
}
inline void Transaction::set_sign(const void* value,
    size_t size) {
  
  sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.sign)
}
inline std::string* Transaction::_internal_mutable_sign() {
  
  return sign_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction::release_sign() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.sign)
  return sign_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.sign)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace corepb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2ftransaction_2eproto
